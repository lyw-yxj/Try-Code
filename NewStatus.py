# 元组（Tuple）
# 元组是不可变的序列，一旦创建，其内部元素就不能被修改。
# 元组使用小括号()来定义，而列表使用方括号[]。
# 元组通常用于存储那些不应该被改变的数据集，如函数的返回值、数据库的查询结果等。
# 元组的设计初衷是为了提供一种更轻量级、更安全的数据结构，不可变性保证了数据的完整性，防止在程序运行过程中被意外修改。


# 元组的创建

## 直接创建：tuple1 = (1, 2, 3)
## 不使用括号创建：tuple2 = 1, 2, 3（Python会自动识别为元组）
## 创建空元组：empty_tuple = ()




## 创建单元素元组：single_tuple = (1,)（注意逗号）



##
##t = 1,2,3
##print(t)
##print(type(t))

##
##t = ()
##print(t)
##print(type(t))
##
##t = (1,)
##print(t)
##print(type(t))
##
##t = (1)     # ？元组？整数？
##print(t)
##print(type(t))

# 请学生尝试创建一个包含自己个人信息的元组

##t = tuple("Hello")
##print(t)
##
##t = tuple([i for i in range(1,20,4)])
##print(t)
##
##t = tuple([11,33,55,11,55])
##print(t)
##
##t = tuple({11,33,55,11,55})
##print(t)


# 元组的访问与切片
##fruit = ("苹果", "香蕉", "橘子", "葡萄")
##print(fruit[0])  # 输出：苹果
##print(fruit[1:3])  # 输出：('香蕉', '橘子')
##print(fruit[0::2]) # ?
### ？橘子
### ？橘子 葡萄
##
##for e in fruit:
##    print(e)
##
##for i,e in enumerate(fruit):
##    print(i,e)


##元组的常用操作和方法
##长度：len(tuple1)
##连接：tuple3 = tuple1 + tuple2
##重复：tuple2 = tuple1 * 3
##元素存在性：in关键字判断元素是否在元组中
##元组不可变性：不能直接修改元组元素，但可以通过重新赋值整个元组来“更新”。
##？元组不可变，那如果我们想改变元组中的某个值怎么办？”


# 假设我们有一个学生成绩管理系统
# 每个学生的成绩以元组的形式存储，
#    包含姓名、数学成绩、英语成绩。
# 有一个学生成绩列表stuSco，需要计算
# 每个学生的平均成绩，并找出平均成绩最高的学生。

##stuSco = [("张三",85,90),("李四",78,82),("王五",92,95)]
##
##highest_avg = 0
##highest_stu = None
##
##for stu in stuSco:
##    name,math,eng = stu
##    avg = (math + eng)/2
##    if avg > highest_avg:
##        highest_avg = avg
##        highest_stu = name
##
##print(f"平均成绩最高的学生是：{highest_stu}，平均成绩为：{highest_avg}")

# 请修改代码，使其能输出所有学生的姓名和平均成绩

##回顾
##元组是不可变的序列，用于存储不应被改变的数据。
##可以通过索引访问元组元素，也可以使用切片操作。
##元组在实际应用中非常广泛，如函数返回值、数据库查询结果等。

##？
##元组和列表有什么区别？
##元组为什么是不可变的？这有什么好处？
##请举一个你认为可以使用元组的实际场景。














